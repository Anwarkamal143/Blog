import { AppState } from '@redux/store';
import { createSlice } from '@reduxjs/toolkit';
import { UserTypes } from '@utils/enums';

interface IUserState {
  role: keyof typeof UserTypes;
  name?: string;
  status?: string;
  _id?: string;
}

const initialState: IUserState = {
  role: 'admin',
};

export const USlice = createSlice({
  name: 'userSlice',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // [HYDRATE]: (state, action) => {
    //   console.log("HYDRATE", action.payload)
    //   return {
    //     ...state,
    //     ...action.payload.subject,
    //   }
    // },

    setUser: (state, action) => {
      return { ...state, ...action.payload };
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // builder.addCase(HYDRATE, (state, action: any) => {
    //   console.log("HYDRATE", action.payload, state.value)
    //   return {
    //     ...state,
    //     ...action.payload.counter,
    //   }
    // })
    // [HYDRATE]: (state, action) => {
    //   console.log("HYDRATE", action.payload)
    //   return {
    //     ...state,
    //     ...action.payload.subject,
    //   }
    // },
    // builder
    //   .addCase(incrementAsync.pending, state => {
    //     state.status = "loading"
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = "idle"
    //     state.value += action.payload
    //   })
  },
});

// Extract the action creators object and the reducer
const { actions, reducer } = USlice;

export const { setUser } = actions;

// Other code such as selectors can use the imported `RootState` type
export const selectUser = (state: AppState) => state.user;

export const User = reducer;
